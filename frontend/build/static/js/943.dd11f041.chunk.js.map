{"version":3,"file":"static/js/943.dd11f041.chunk.js","mappings":"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","sources":["actions/messageAction.js","components/Chats/ChatListItem.jsx","components/Chats/Sidebar.jsx","components/Chats/Message.jsx","components/Chats/SearchModal.jsx","components/Chats/Inbox.jsx","components/Layouts/SkeletonUserItem.jsx","utils/constants.js"],"sourcesContent":["import axios from \"axios\";\nimport { ALL_MESSAGES_FAIL, ALL_MESSAGES_REQUEST, ALL_MESSAGES_SUCCESS, CLEAR_ERRORS, NEW_MESSAGE_FAIL, NEW_MESSAGE_REQUEST, NEW_MESSAGE_SUCCESS } from \"../constants/messageConstants\";\n\n// Get All Messages\nexport const getAllMessages = (chatId) => async (dispatch) => {\n    try {\n\n        dispatch({ type: ALL_MESSAGES_REQUEST });\n\n        const { data } = await axios.get(`/api/v1/messages/${chatId}`);\n\n        dispatch({\n            type: ALL_MESSAGES_SUCCESS,\n            payload: data.messages,\n        });\n\n    } catch (error) {\n        dispatch({\n            type: ALL_MESSAGES_FAIL,\n            payload: error.response.data.message,\n        });\n    }\n};\n\n// New Message\nexport const sendMessage = (msgData) => async (dispatch) => {\n    try {\n\n        dispatch({ type: NEW_MESSAGE_REQUEST });\n        const config = { header: { \"Content-Type\": \"application/json\" } }\n        const { data } = await axios.post('/api/v1/newMessage/', msgData, config);\n\n        dispatch({\n            type: NEW_MESSAGE_SUCCESS,\n            payload: data,\n        });\n\n    } catch (error) {\n        dispatch({\n            type: NEW_MESSAGE_FAIL,\n            payload: error.response.data.message,\n        });\n    }\n}\n\n// Clear All Errors\nexport const clearErrors = () => (dispatch) => {\n    dispatch({ type: CLEAR_ERRORS });\n}","import { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useParams } from 'react-router-dom'\nimport { SOCKET_ENDPOINT } from '../../utils/constants';\nimport { io } from 'socket.io-client';\n\nconst ChatListItem = ({ _id, users, latestMessage }) => {\n\n    const dispatch = useDispatch();\n    const params = useParams();\n    const [friend, setFriend] = useState({});\n\n    const socket = useRef(null);\n    const [isOnline, setIsOnline] = useState(false);\n\n    const { user } = useSelector((state) => state.user);\n\n    useEffect(() => {\n        const friendDetails = users.find((u) => u._id !== user._id);\n        setFriend(friendDetails)\n    }, [users]);\n\n    useEffect(() => {\n        socket.current = io(SOCKET_ENDPOINT);\n    }, []);\n\n    useEffect(() => {\n        socket.current.on(\"getUsers\", users => {\n            // console.log(users);\n            setIsOnline(users.some((u) => u.userId === friend._id));\n        })\n    }, [friend._id])\n\n    return (\n        <Link to={`/direct/t/${_id}/${friend._id}`} className={`${params.chatId === _id && 'bg-gray-100'} flex gap-3 items-center py-2 px-4 cursor-pointer hover:bg-gray-100`}>\n            <div className=\"w-14 h-14 relative\">\n                <img draggable=\"false\" className=\"w-full h-full rounded-full object-cover\" src={friend.avatar} alt=\"avatar\" />\n                {isOnline && <div className=\"absolute right-0 bottom-0.5 h-3 w-3 bg-green-500 rounded-full\"></div>}\n            </div>\n            <div className=\"flex flex-col items-start\">\n                <span className=\"text-sm\">{friend.name}</span>\n                <span className=\"text-sm truncate w-36 text-gray-400\">{latestMessage?.content}</span>\n            </div>\n        </Link>\n    )\n}\n\nexport default ChatListItem","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { clearErrors, getAllChats } from '../../actions/chatAction';\nimport ChatListItem from './ChatListItem';\nimport SkeletonUserItem from '../Layouts/SkeletonUserItem';\nimport { Skeleton } from '@mui/material';\n\nconst Sidebar = ({ openModal, socket }) => {\n\n    const dispatch = useDispatch();\n    const params = useParams();\n\n    const { user } = useSelector((state) => state.user)\n    const { loading, error, chats } = useSelector((state) => state.allChats)\n\n    useEffect(() => {\n        if (error) {\n            toast.error(error);\n            dispatch(clearErrors());\n        }\n        dispatch(getAllChats());\n    }, [dispatch, error, params.chatId]);\n\n    return (\n        <>\n            <div className=\"hidden sm:flex flex-col h-full w-2/6 border-r\">\n\n                <div className=\"flex items-center justify-between border-b p-4\">\n                    <span className=\"mx-auto font-medium cursor-pointer\">{user.username}</span>\n                    <svg onClick={openModal} className=\"cursor-pointer\" aria-label=\"New Message\" color=\"#262626\" fill=\"#262626\" height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M12.202 3.203H5.25a3 3 0 00-3 3V18.75a3 3 0 003 3h12.547a3 3 0 003-3v-6.952\" fill=\"none\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\"></path><path d=\"M10.002 17.226H6.774v-3.228L18.607 2.165a1.417 1.417 0 012.004 0l1.224 1.225a1.417 1.417 0 010 2.004z\" fill=\"none\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\"></path><line fill=\"none\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" x1=\"16.848\" x2=\"20.076\" y1=\"3.924\" y2=\"7.153\"></line></svg>\n                </div>\n\n                <div className=\"flex flex-col overflow-y-auto overflow-x-hidden\">\n\n                    <span className=\"px-4 py-2 font-medium\">Messages</span>\n\n                    {/* {loading &&\n                        Array(10).fill(\"\").map((el, i) => (\n                            <div className=\"flex items-center gap-2 py-2 px-4\" key={i}>\n                                <Skeleton animation=\"wave\" variant=\"circular\" width={65} height={50} />\n                                <div className=\"flex flex-col gap-0 w-full\">\n                                    <Skeleton height={23} width=\"85%\" animation=\"wave\" />\n                                    <Skeleton height={23} width=\"60%\" animation=\"wave\" />\n                                </div>\n                            </div>\n                        ))\n                    } */}\n\n                    {chats?.map((c) => (\n                        <ChatListItem {...c} key={c._id} />\n                    ))}\n\n                </div>\n\n            </div>\n\n        </>\n    )\n}\n\nexport default Sidebar","\nconst Message = ({ ownMsg, avatar, content }) => {\n    return (\n        ownMsg ?\n            content === '❤️' ?\n                <span className=\"self-end text-4xl\">{content}</span>\n                :\n                <span className=\"self-end text-sm text-white bg-violet-600 px-4 py-3 rounded-3xl max-w-xs\">{content}</span>\n            :\n            content === '❤️' ?\n                <div className=\"flex items-end gap-2 max-w-xs\">\n                    <img draggable=\"false\" className=\"w-7 h-7 rounded-full object-cover\" src={avatar} alt=\"avatar\" />\n                    <span className=\"items-end text-4xl\">{content}</span>\n                </div>\n                :\n                <div className=\"flex items-end gap-2 max-w-xs\">\n                    <img draggable=\"false\" className=\"w-7 h-7 rounded-full object-cover\" src={avatar} alt=\"avatar\" />\n                    <span className=\"px-4 py-3 text-sm bg-gray-200 rounded-3xl max-w-xs overflow-hidden\">{content}</span>\n                </div>\n    )\n}\n\nexport default Message","import Dialog from '@mui/material/Dialog';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { NEW_CHAT_RESET } from '../../constants/chatConstants';\nimport { toast } from 'react-toastify';\nimport { addNewChat, clearErrors } from '../../actions/chatAction';\nimport { Skeleton } from '@mui/material';\n\nconst NewDialog = ({ open, onClose }) => {\n\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const [users, setUsers] = useState([]);\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n\n    const { user: self } = useSelector((state) => state.user);\n    const { error, chat } = useSelector((state) => state.newChat);\n\n    const fetchUsers = async (term) => {\n        setLoading(true);\n        const { data } = await axios.get(`/api/v1/users?keyword=${term}`);\n        setUsers(data.users.filter((u) => u._id !== self._id));\n        setLoading(false);\n    }\n\n    useEffect(() => {\n        if (searchTerm.trim().length > 0) {\n            fetchUsers(searchTerm);\n        }\n\n        return () => {\n            setUsers([]);\n        }\n    }, [searchTerm]);\n\n    const addToChat = (userId) => {\n        dispatch(addNewChat(userId));\n        setSearchTerm(\"\")\n    }\n\n    useEffect(() => {\n        if (error) {\n            toast.error(error);\n            dispatch(clearErrors());\n        }\n        if (chat) {\n            const friendId = chat.users?.find((id) => id !== self._id);\n            navigate(`/direct/t/${chat._id}/${friendId}`);\n            dispatch({ type: NEW_CHAT_RESET });\n            onClose();\n        }\n    }, [dispatch, error, chat, navigate]);\n\n    return (\n        <Dialog open={open} onClose={onClose}>\n            <div className=\"flex flex-col w-80 sm:w-96\">\n                <div className=\"flex justify-between items-center px-4 border-b py-2.5\">\n                    <span className=\"font-medium mx-auto\">New Message</span>\n                    <svg onClick={onClose} className=\"cursor-pointer\" aria-label=\"Close\" color=\"#262626\" fill=\"#262626\" height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\"><line fill=\"none\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" x1=\"21\" x2=\"3\" y1=\"3\" y2=\"21\"></line><line fill=\"none\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" x1=\"21\" x2=\"3\" y1=\"21\" y2=\"3\"></line></svg>\n                </div>\n\n                <div className=\"flex items-center gap-3 border-b p-3\">\n                    <span className=\"font-medium\">To:</span>\n                    <input\n                        className=\"outline-none w-full\"\n                        type=\"text\"\n                        placeholder=\"Search User..\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                    />\n                </div>\n\n                <div className=\"flex flex-col overflow-x-hidden h-96 w-full\">\n\n                    {loading ?\n                        Array(8).fill(\"\").map((el, i) => (\n                            <div className=\"flex items-center gap-2 py-2 px-4\" key={i}>\n                                <Skeleton animation=\"wave\" variant=\"circular\" width={60} height={50} />\n                                <div className=\"flex flex-col gap-0 w-full\">\n                                    <Skeleton height={23} width=\"45%\" animation=\"wave\" />\n                                    <Skeleton height={23} width=\"30%\" animation=\"wave\" />\n                                </div>\n                            </div>\n                        ))\n                        : users.length > 0 ?\n                            users.map((u) => (\n                                <div onClick={() => addToChat(u._id)} className=\"flex items-center hover:bg-gray-50 py-2 px-4 cursor-pointer\" key={u._id}>\n                                    <div className=\"flex space-x-3 items-center\">\n                                        <img draggable=\"false\" className=\"w-11 h-11 rounded-full object-cover\" src={u.avatar} alt=\"avatar\" />\n                                        <div className=\"flex flex-col items-start\">\n                                            <span className=\"text-black text-sm font-semibold\">{u.username}</span>\n                                            <span className=\"text-gray-400 text-sm\">{u.name}</span>\n                                        </div>\n                                    </div>\n                                </div>\n                            ))\n                            :\n                            <span className=\"text-gray-400 text-sm p-2\">No accounts found.</span>\n                    }\n\n                </div>\n            </div>\n        </Dialog >\n    )\n}\n\nexport default NewDialog","import React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { clearErrors, getAllMessages, sendMessage } from '../../actions/messageAction';\nimport { getUserDetailsById } from '../../actions/userAction';\nimport { ALL_MESSAGES_ADD, NEW_MESSAGE_RESET } from '../../constants/messageConstants';\nimport { SOCKET_ENDPOINT } from '../../utils/constants';\nimport Sidebar from './Sidebar';\nimport { io } from 'socket.io-client';\nimport Message from './Message';\nimport { Picker } from 'emoji-mart'\nimport SearchModal from './SearchModal';\nimport SpinLoader from '../Layouts/SpinLoader';\nimport MetaData from '../Layouts/MetaData';\nimport { USER_DETAILS_RESET } from '../../constants/userConstants';\n\nconst Inbox = () => {\n\n    const dispatch = useDispatch();\n    const params = useParams();\n\n    const [message, setMessage] = useState(\"\");\n    const [arrivalMessage, setArrivalMessage] = useState(null);\n    const scrollRef = useRef(null);\n    const socket = useRef(null);\n\n    const [typing, setTyping] = useState(false);\n    const [isTyping, setIsTyping] = useState(false);\n    const [typingData, setTypingData] = useState({});\n\n    const [isOnline, setIsOnline] = useState(false);\n    const [showEmojis, setShowEmojis] = useState(false);\n\n    const [showSearch, setShowSearch] = useState(false);\n\n    const { user: loggedInUser } = useSelector((state) => state.user)\n    const { user: friend } = useSelector((state) => state.userDetails);\n    const { error, messages, loading } = useSelector((state) => state.allMessages)\n    const { success, newMessage } = useSelector((state) => state.newMessage);\n\n    const userId = params.userId;\n\n    useEffect(() => {\n        socket.current = io(SOCKET_ENDPOINT);\n        socket.current.on(\"getMessage\", (data) => {\n            setArrivalMessage({\n                sender: data.senderId,\n                content: data.content,\n                createdAt: Date.now(),\n            });\n        });\n        socket.current.on(\"typing\", (senderId) => {\n            setTypingData({ senderId, typing: true })\n        });\n        socket.current.on(\"typing stop\", (senderId) => {\n            setTypingData({ senderId, typing: false })\n        });\n    }, []);\n\n    useEffect(() => {\n        typingData && typingData.senderId === userId &&\n            setIsTyping(typingData.typing)\n    }, [typingData, userId])\n\n\n    useEffect(() => {\n        arrivalMessage && arrivalMessage.sender === userId &&\n            dispatch({\n                type: ALL_MESSAGES_ADD,\n                payload: arrivalMessage\n            });\n        // console.log(arrivalMessage);\n    }, [arrivalMessage, userId])\n\n\n    useEffect(() => {\n        socket.current.emit(\"addUser\", loggedInUser._id);\n        socket.current.on(\"getUsers\", users => {\n            // console.log(users);\n            setIsOnline(users.some((u) => u.userId === userId));\n        })\n    }, [loggedInUser._id, userId])\n\n    useEffect(() => {\n        if (error) {\n            toast.error(error);\n            dispatch(clearErrors());\n        }\n        if (params.chatId && userId) {\n            dispatch(getAllMessages(params.chatId));\n            dispatch(getUserDetailsById(userId));\n        }\n\n        return () => {\n            dispatch({ type: USER_DETAILS_RESET })\n        }\n\n    }, [dispatch, error, params.chatId, userId]);\n\n    useEffect(() => {\n        if (success) {\n            dispatch({\n                type: ALL_MESSAGES_ADD,\n                payload: newMessage\n            })\n            dispatch({ type: NEW_MESSAGE_RESET });\n        }\n    }, [dispatch, success])\n\n\n    const handleSubmit = (e, msg = message) => {\n        e.preventDefault();\n\n        socket?.current.emit(\"sendMessage\", {\n            senderId: loggedInUser._id,\n            receiverId: userId,\n            content: msg,\n        });\n\n        const msgData = {\n            chatId: params.chatId,\n            content: msg\n        }\n\n        dispatch(sendMessage(msgData));\n        setMessage(\"\");\n    }\n\n    useEffect(() => {\n        scrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\n    }, [messages]);\n\n    const handleTyping = (e) => {\n        setMessage(e.target.value);\n\n        if (!typing) {\n            setTyping(true);\n            socket?.current.emit(\"typing\", {\n                senderId: loggedInUser._id,\n                receiverId: userId\n            });\n        }\n\n        setTimeout(() => {\n            socket?.current.emit(\"typing stop\", {\n                senderId: loggedInUser._id,\n                receiverId: userId\n            });\n            setTyping(false);\n        }, 2000);\n    }\n\n    const handleModalClose = () => {\n        setShowSearch(false);\n    }\n\n    const openModal = () => {\n        setShowSearch(true);\n    }\n\n    return (\n        <>\n            <MetaData title=\"Instagram • Chats\" />\n\n            <div className=\"mt-14 sm:mt-[4.7rem] pb-4 rounded h-[90vh] xl:w-2/3 mx-auto sm:pr-14 sm:pl-8\">\n                <div className=\"flex border h-full rounded w-full bg-white\">\n\n                    {/* sidebar */}\n                    <Sidebar openModal={openModal} />\n\n                    {!userId ?\n                        <div className=\"flex flex-col items-center justify-center w-full sm:w-4/6 gap-2\">\n                            <div className=\"w-24 h-24 flex items-center p-2 justify-center border-2 border-black rounded-full\">\n                                <img draggable=\"false\" loading=\"lazy\" className=\"w-full h-full rotate-12 object-contain\" src=\"https://static.thenounproject.com/png/172101-200.png\" alt=\"message\" />\n                            </div>\n                            <h2 className=\"text-2xl font-thin\">Your Messages</h2>\n                            <p className=\"text-gray-400 text-sm\">Send private photos and messages to a friend or group.</p>\n                            <button onClick={openModal} className=\"bg-primary-blue rounded px-2.5 mt-2 py-1.5 text-white text-sm font-medium hover:drop-shadow-lg\">Send Message</button>\n                        </div>\n                        :\n                        <div className=\"flex flex-col justify-between w-full sm:w-4/6\">\n\n                            {/* header */}\n                            <div className=\"flex py-3 px-6 border-b items-center justify-between\">\n                                <div className=\"flex gap-2 items-center\">\n                                    <div className=\"w-8 h-8 relative\">\n                                        <img draggable=\"false\" loading=\"lazy\" className=\"w-full h-full rounded-full object-cover\" src={friend.avatar} alt=\"avatar\" />\n                                        {isOnline && <div className=\"absolute -right-0.5 -bottom-0.5 h-3 w-3 bg-green-500 rounded-full\"></div>}\n                                    </div>\n                                    <span className=\"font-medium cursor-pointer\">{friend.name}</span>\n                                </div>\n                                <svg className=\"cursor-pointer\" aria-label=\"View Thread Details\" color=\"#262626\" fill=\"#262626\" height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\"><circle cx=\"12.001\" cy=\"12.005\" fill=\"none\" r=\"10.5\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\"></circle><circle cx=\"11.819\" cy=\"7.709\" r=\"1.25\"></circle><line fill=\"none\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" x1=\"10.569\" x2=\"13.432\" y1=\"16.777\" y2=\"16.777\"></line><polyline fill=\"none\" points=\"10.569 11.05 12 11.05 12 16.777\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\"></polyline></svg>\n                            </div>\n\n                            {/* messages */}\n                            <div className=\"w-full flex-1 flex flex-col gap-1.5 overflow-y-auto overflow-x-hidden p-4\">\n                                {loading ? <SpinLoader /> :\n                                    messages.map((m, i) => (\n                                        <React.Fragment key={m._id}>\n                                            <Message ownMsg={m.sender === loggedInUser._id} {...friend} {...m} />\n                                            <div ref={scrollRef}></div>\n                                        </React.Fragment>\n                                    ))\n                                }\n                                {isTyping &&\n                                    <>\n                                        <div className=\"flex items-center gap-3 max-w-xs\">\n                                            <img draggable=\"false\" loading=\"lazy\" className=\"w-7 h-7 rounded-full object-cover\" src={friend.avatar} alt=\"avatar\" />\n                                            <span className=\"text-sm text-gray-500\">typing...</span>\n                                        </div>\n                                        <div ref={scrollRef}></div>\n                                    </>\n                                }\n                            </div>\n\n                            {/* message input */}\n                            <form onSubmit={handleSubmit} className=\"flex items-center gap-3 justify-between border rounded-full py-2.5 px-4 m-5 relative\">\n                                <span onClick={() => setShowEmojis(!showEmojis)} className=\"cursor-pointer hover:opacity-60\">\n                                    <svg aria-label=\"Emoji\" color=\"#262626\" fill=\"#262626\" height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M15.83 10.997a1.167 1.167 0 101.167 1.167 1.167 1.167 0 00-1.167-1.167zm-6.5 1.167a1.167 1.167 0 10-1.166 1.167 1.167 1.167 0 001.166-1.167zm5.163 3.24a3.406 3.406 0 01-4.982.007 1 1 0 10-1.557 1.256 5.397 5.397 0 008.09 0 1 1 0 00-1.55-1.263zM12 .503a11.5 11.5 0 1011.5 11.5A11.513 11.513 0 0012 .503zm0 21a9.5 9.5 0 119.5-9.5 9.51 9.51 0 01-9.5 9.5z\"></path></svg>\n                                </span>\n\n                                {showEmojis && (\n                                    <div className=\"absolute bottom-14 -left-10\">\n                                        <Picker\n                                            set=\"google\"\n                                            onSelect={(e) => setMessage(message + e.native)}\n                                            title=\"Emojis\"\n                                        />\n                                    </div>\n                                )}\n\n                                <input\n                                    className=\"flex-1 outline-none text-sm\"\n                                    type=\"text\"\n                                    placeholder=\"Message...\"\n                                    value={message}\n                                    onFocus={() => setShowEmojis(false)}\n                                    onChange={handleTyping}\n                                    required\n                                />\n                                {message.trim().length > 0 ?\n                                    <button className=\"text-primary-blue font-medium text-sm\">Send</button>\n                                    :\n                                    <>\n                                        <svg className=\"cursor-pointer\" aria-label=\"Add Photo or Video\" color=\"#262626\" fill=\"#262626\" height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M6.549 5.013A1.557 1.557 0 108.106 6.57a1.557 1.557 0 00-1.557-1.557z\" fillRule=\"evenodd\"></path><path d=\"M2 18.605l3.901-3.9a.908.908 0 011.284 0l2.807 2.806a.908.908 0 001.283 0l5.534-5.534a.908.908 0 011.283 0l3.905 3.905\" fill=\"none\" stroke=\"currentColor\" strokeLinejoin=\"round\" strokeWidth=\"2\"></path><path d=\"M18.44 2.004A3.56 3.56 0 0122 5.564h0v12.873a3.56 3.56 0 01-3.56 3.56H5.568a3.56 3.56 0 01-3.56-3.56V5.563a3.56 3.56 0 013.56-3.56z\" fill=\"none\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\"></path></svg>\n                                        <svg onClick={(e) => handleSubmit(e, '❤️')} className=\"hover:opacity-70 cursor-pointer\" aria-label=\"Like\" color=\"#262626\" fill=\"#262626\" height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M16.792 3.904A4.989 4.989 0 0121.5 9.122c0 3.072-2.652 4.959-5.197 7.222-2.512 2.243-3.865 3.469-4.303 3.752-.477-.309-2.143-1.823-4.303-3.752C5.141 14.072 2.5 12.167 2.5 9.122a4.989 4.989 0 014.708-5.218 4.21 4.21 0 013.675 1.941c.84 1.175.98 1.763 1.12 1.763s.278-.588 1.11-1.766a4.17 4.17 0 013.679-1.938m0-2a6.04 6.04 0 00-4.797 2.127 6.052 6.052 0 00-4.787-2.127A6.985 6.985 0 00.5 9.122c0 3.61 2.55 5.827 5.015 7.97.283.246.569.494.853.747l1.027.918a44.998 44.998 0 003.518 3.018 2 2 0 002.174 0 45.263 45.263 0 003.626-3.115l.922-.824c.293-.26.59-.519.885-.774 2.334-2.025 4.98-4.32 4.98-7.94a6.985 6.985 0 00-6.708-7.218z\"></path></svg>\n                                    </>\n                                }\n                            </form>\n\n                        </div>\n\n                    }\n                </div>\n\n                <SearchModal open={showSearch} onClose={handleModalClose} />\n\n            </div>\n        </>\n    )\n}\n\nexport default Inbox","import { Skeleton } from '@mui/material'\n\nconst SkeletonUserItem = () => {\n    return (\n        <div className=\"flex items-center gap-2\">\n            <Skeleton animation=\"wave\" variant=\"circular\" width={45} height={40} />\n            <div className=\"flex flex-col gap-1 w-full\">\n                <Skeleton height={15} variant=\"rectangular\" width=\"60%\" animation=\"wave\" />\n                <Skeleton height={12} variant=\"rectangular\" width=\"30%\" animation=\"wave\" />\n            </div>\n        </div>\n    )\n}\n\nexport default SkeletonUserItem","// export const SOCKET_ENDPOINT = \"http://localhost:4000\";\nexport const SOCKET_ENDPOINT = \"https://instagrammern.herokuapp.com\";\n\nexport const stories = [\n    {\n        title: \"JavaScript\",\n        image: \"javascript\"\n    },\n    {\n        title: \"Node.js\",\n        image: \"nodejs\"\n    },\n    {\n        title: \"Express.js\",\n        image: \"expressjs\"\n    },\n    {\n        title: \"MongoDB\",\n        image: \"mongodb\"\n    },\n    {\n        title: \"React.js\",\n        image: \"reactjs\"\n    },\n    {\n        title: \"Socket.io\",\n        image: \"socketio\"\n    },\n    {\n        title: \"TailwindCSS\",\n        image: \"tailwind\"\n    },\n    {\n        title: \"Heroku\",\n        image: \"heroku\"\n    },\n    {\n        title: \"MaterialUI\",\n        image: \"mui\"\n    },\n    {\n        title: \"Redux\",\n        image: \"redux\"\n    },\n    {\n        title: \"Multer\",\n        image: \"multer\"\n    },\n    {\n        title: \"AWS S3\",\n        image: \"aws-s3\"\n    },\n    {\n        title: \"Sendgrid\",\n        image: \"sendgrid\"\n    },\n    {\n        title: \"Axios\",\n        image: \"axios\"\n    },\n    {\n        title: \"Toastify\",\n        image: \"toastify\"\n    },\n]"],"names":["sendMessage","msgData","dispatch","type","NEW_MESSAGE_REQUEST","config","header","axios","data","NEW_MESSAGE_SUCCESS","payload","NEW_MESSAGE_FAIL","response","message","_id","users","latestMessage","params","useDispatch","useParams","useState","friend","setFriend","socket","useRef","isOnline","setIsOnline","user","useSelector","state","useEffect","friendDetails","find","u","current","io","SOCKET_ENDPOINT","on","some","userId","to","className","chatId","draggable","src","avatar","alt","name","content","openModal","allChats","error","loading","chats","toast","clearErrors","getAllChats","username","onClick","color","fill","height","role","viewBox","width","d","stroke","strokeLinecap","strokeLinejoin","strokeWidth","x1","x2","y1","y2","map","c","key","ownMsg","open","onClose","navigate","useNavigate","setUsers","searchTerm","setSearchTerm","setLoading","self","newChat","chat","fetchUsers","term","filter","trim","length","friendId","id","NEW_CHAT_RESET","Dialog","placeholder","value","onChange","e","target","Array","el","i","Skeleton","animation","variant","addNewChat","setMessage","arrivalMessage","setArrivalMessage","scrollRef","typing","setTyping","isTyping","setIsTyping","typingData","setTypingData","showEmojis","setShowEmojis","showSearch","setShowSearch","loggedInUser","userDetails","allMessages","messages","newMessage","success","sender","senderId","createdAt","Date","now","ALL_MESSAGES_ADD","emit","CLEAR_ERRORS","ALL_MESSAGES_REQUEST","ALL_MESSAGES_SUCCESS","ALL_MESSAGES_FAIL","getUserDetailsById","USER_DETAILS_RESET","NEW_MESSAGE_RESET","handleSubmit","msg","preventDefault","receiverId","scrollIntoView","behavior","MetaData","title","cx","cy","r","points","SpinLoader","m","ref","onSubmit","set","onSelect","native","onFocus","setTimeout","required","fillRule","SearchModal","stories","image"],"sourceRoot":""}